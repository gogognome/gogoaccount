package nl.gogognome.gogoaccount.test;


import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;
import static junit.framework.Assert.fail;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import nl.gogognome.gogoaccount.businessobjects.Invoice;
import nl.gogognome.gogoaccount.businessobjects.InvoiceSearchCriteria;
import nl.gogognome.gogoaccount.component.party.Party;
import nl.gogognome.gogoaccount.component.configuration.ConfigurationService;
import nl.gogognome.gogoaccount.component.party.PartyService;
import nl.gogognome.gogoaccount.services.BookkeepingService;
import nl.gogognome.gogoaccount.services.InvoiceLineDefinition;
import nl.gogognome.gogoaccount.services.InvoiceService;
import nl.gogognome.gogoaccount.services.ServiceException;
import nl.gogognome.lib.text.Amount;
import nl.gogognome.lib.util.DateUtil;

import org.junit.Test;


public class TestInvoiceService extends AbstractBookkeepingTest {

	private final ConfigurationService configurationService = new ConfigurationService();
	private final PartyService partyService = new PartyService();

	@Test
	public void testInvoiceCreation() throws Exception {
		List<Party> parties = partyService.findAllParties(document);
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, configurationService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, a, configurationService.getAccount(document, "400"), false));
		InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}", parties, issueDate, "Invoice for {name}", lines);

		for (Party p : parties) {
			Invoice inv = document.getInvoice("inv-" + p.getId());
			assertEquals("[Invoice for " + p.getName() + ", Zaalhuur]", Arrays.toString(inv.getDescriptions()));
			assertEquals(a, inv.getAmountToBePaid());
		}
	}

	@Test
	public void testInvoiceCreationWithAutoGeneratedIds() throws Exception {
		List<Party> parties = partyService.findAllParties(document);
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, configurationService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, a, configurationService.getAccount(document, "400"), false));
		InvoiceService.createInvoiceAndJournalForParties(document, "auto",
				parties, issueDate, "Invoice for {name}", lines);

		for (Party p : parties) {
			InvoiceSearchCriteria searchCriteria = new InvoiceSearchCriteria();
			searchCriteria.setName(p.getName());
			searchCriteria.setId("auto");
			Invoice[] invoices = document.getInvoices(searchCriteria);
			assertEquals(1, invoices.length);

			Invoice inv = invoices[0];
			assertEquals("[Invoice for " + p.getName() + ", Zaalhuur]",
					Arrays.toString(inv.getDescriptions()));
			assertEquals(a, inv.getAmountToBePaid());
		}
	}

	@Test
	public void cannotCreateInvoicesWithoutAmountToBePaidSelected() throws Exception {
		List<Party> parties = partyService.findAllParties(document);
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, configurationService.getAccount(document, "190"), false),
			new InvoiceLineDefinition(null, a, configurationService.getAccount(document, "400"), false));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
            assertTrue(true);
        }
	}

	@Test
	public void cannotCreateInvoicesWithMultipleAmountToBePaidSelected() throws Exception {
		List<Party> parties = partyService.findAllParties(document);
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, configurationService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, a, configurationService.getAccount(document, "400"), true));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
            assertTrue(true);
		}
	}

	@Test
	public void cannotCreateInvoicesWithoutDebetOrCreditAmountOnSingleLine() throws Exception {
		List<Party> parties = partyService.findAllParties(document);
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, configurationService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, null, configurationService.getAccount(document, "190"), false),
			new InvoiceLineDefinition(null, a, configurationService.getAccount(document, "400"), false));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
            assertTrue(true);
        }
	}

	@Test
	public void cannotCreateInvoicesWithDebetAndCreditAmountOnSingleLine() throws Exception {
		List<Party> parties = partyService.findAllParties(document);
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, configurationService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(a, a, configurationService.getAccount(document, "190"), false),
			new InvoiceLineDefinition(null, a, configurationService.getAccount(document, "400"), false));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
			assertTrue(true);
		}
	}

}
