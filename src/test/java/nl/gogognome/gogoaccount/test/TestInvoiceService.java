/*
    This file is part of gogo account.

    gogo account is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    gogo account is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public Licensen
    along with gogo account.  If not, see <http://www.gnu.org/licenses/>.
*/
package nl.gogognome.gogoaccount.test;


import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.fail;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import nl.gogognome.gogoaccount.businessobjects.Invoice;
import nl.gogognome.gogoaccount.businessobjects.InvoiceSearchCriteria;
import nl.gogognome.gogoaccount.businessobjects.Party;
import nl.gogognome.gogoaccount.services.BookkeepingService;
import nl.gogognome.gogoaccount.services.InvoiceLineDefinition;
import nl.gogognome.gogoaccount.services.InvoiceService;
import nl.gogognome.gogoaccount.services.ServiceException;
import nl.gogognome.lib.text.Amount;
import nl.gogognome.lib.util.DateUtil;

import org.junit.Test;


/**
 * This class tests the InvoiceService.
 *
 * @author Sander Kooijmans
 */
public class TestInvoiceService extends AbstractBookkeepingTest {

    private BookkeepingService bookkeepingService = new BookkeepingService();

	@Test
	public void testInvoiceCreation() throws Exception {
		List<Party> parties = Arrays.asList(document.getParties());
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, bookkeepingService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, a, bookkeepingService.getAccount(document, "400"), false));
		InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
				parties, issueDate, "Invoice for {name}", lines);

		for (Party p : parties) {
			Invoice inv = document.getInvoice("inv-" + p.getId());
			assertEquals("[Invoice for " + p.getName() + ", Zaalhuur]",
					Arrays.toString(inv.getDescriptions()));
			assertEquals(a, inv.getAmountToBePaid());
		}
	}

	@Test
	public void testInvoiceCreationWithAutoGeneratedIds() throws Exception {
		List<Party> parties = Arrays.asList(document.getParties());
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, bookkeepingService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, a, bookkeepingService.getAccount(document, "400"), false));
		InvoiceService.createInvoiceAndJournalForParties(document, "auto",
				parties, issueDate, "Invoice for {name}", lines);

		for (Party p : parties) {
			InvoiceSearchCriteria searchCriteria = new InvoiceSearchCriteria();
			searchCriteria.setName(p.getName());
			searchCriteria.setId("auto");
			Invoice[] invoices = document.getInvoices(searchCriteria);
			assertEquals(1, invoices.length);

			Invoice inv = invoices[0];
			assertEquals("[Invoice for " + p.getName() + ", Zaalhuur]",
					Arrays.toString(inv.getDescriptions()));
			assertEquals(a, inv.getAmountToBePaid());
		}
	}

	@Test
	public void cannotCreateInvoicesWithoutAmountToBePaidSelected() throws Exception {
		List<Party> parties = Arrays.asList(document.getParties());
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, bookkeepingService.getAccount(document, "190"), false),
			new InvoiceLineDefinition(null, a, bookkeepingService.getAccount(document, "400"), false));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
		}
	}

	@Test
	public void cannotCreateInvoicesWithMultipleAmountToBePaidSelected() throws Exception {
		List<Party> parties = Arrays.asList(document.getParties());
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, bookkeepingService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, a, bookkeepingService.getAccount(document, "400"), true));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
		}
	}

	@Test
	public void cannotCreateInvoicesWithoutDebetOrCreditAmountOnSingleLine() throws Exception {
		List<Party> parties = Arrays.asList(document.getParties());
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, bookkeepingService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(null, null, bookkeepingService.getAccount(document, "190"), false),
			new InvoiceLineDefinition(null, a, bookkeepingService.getAccount(document, "400"), false));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
		}
	}

	@Test
	public void cannotCreateInvoicesWithDebetAndCreditAmountOnSingleLine() throws Exception {
		List<Party> parties = Arrays.asList(document.getParties());
		Date issueDate = DateUtil.createDate(2011, 8, 20);
		Amount a = createAmount(20);
		List<InvoiceLineDefinition> lines = Arrays.asList(
			new InvoiceLineDefinition(a, null, bookkeepingService.getAccount(document, "190"), true),
			new InvoiceLineDefinition(a, a, bookkeepingService.getAccount(document, "190"), false),
			new InvoiceLineDefinition(null, a, bookkeepingService.getAccount(document, "400"), false));

		try {
			InvoiceService.createInvoiceAndJournalForParties(document, "inv-{id}",
					parties, issueDate, "Invoice for {name}", lines);
			fail("Expected exception was not thrown");
		} catch (ServiceException e) {
		}
	}

}
