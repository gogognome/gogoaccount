package nl.gogognome.gogoaccount.component.invoice;

import nl.gogognome.dataaccess.dao.AbstractDomainClassDAO;
import nl.gogognome.dataaccess.dao.NameValuePairs;
import nl.gogognome.dataaccess.dao.ResultSetWrapper;
import nl.gogognome.gogoaccount.component.document.Document;
import nl.gogognome.gogoaccount.util.AmountInDatabase;
import nl.gogognome.lib.collections.DefaultValueMap;

import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.util.Collections.emptyList;

class PaymentDAO extends AbstractDomainClassDAO<Payment> {

    public PaymentDAO(Document document) {
        super("payment", "domain_class_sequence", document.getBookkeepingId());
    }

    public List<Payment> findForInvoice(String invoiceId) throws SQLException {
        return findAll(new NameValuePairs().add("invoice_id", invoiceId), "date");
    }

    @Override
    protected Payment getObjectFromResultSet(ResultSetWrapper result) throws SQLException {
        Payment payment = new Payment(result.getString("id"));
        payment.setInvoiceId(result.getString("invoice_id"));
        payment.setDescription(result.getString("description"));
        payment.setDate(result.getDate("date"));
        payment.setAmount(AmountInDatabase.parse(result.getString("amount")));
        return payment;
    }

    public boolean hasPayments(String invoiceId) throws SQLException {
        return existsAtLeastOne(new NameValuePairs().add("invoice_id", invoiceId));
    }

    public DefaultValueMap<String, List<Payment>> getIdToPayments(List<String> invoiceIds) throws SQLException {
        Map<String, List<Payment>> invoiceIdToPayments = execute("SELECT * FROM " + tableName + " WHERE invoice_id IN (?)", invoiceIds)
                .toHashMapOfLists(r -> r.getString("invoice_id"), r -> getObjectFromResultSet(r));
        return new DefaultValueMap<>(invoiceIdToPayments, emptyList());
    }

    @Override
    protected NameValuePairs getNameValuePairs(Payment payment) throws SQLException {
        return new NameValuePairs()
                .add("id", payment.getId())
                .add("invoice_id", payment.getInvoiceId())
                .add("description", payment.getDescription())
                .add("date", payment.getDate())
                .add("amount", AmountInDatabase.format(payment.getAmount()));
    }

    @Override
    protected void addAutoGeneratedValues(NameValuePairs nameValuePairs, Payment object) throws SQLException {
        // Preserve id if it is already present
        if (nameValuePairs.getValue("id") == null) {
            nameValuePairs.remove("id"); // needed in case name id is present with value null.
            nameValuePairs.add("id", Long.toString(this.getNextLongFromSequence(this.sequenceName)));
        }
    }
}
